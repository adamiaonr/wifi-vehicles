#!/bin/bash

if [ $# -lt 1 ]
then
	echo "usage : $0 <trace-nr>"
	echo "options : "
	echo "    <trace-nr> : nr. of trace to use in logs. 3 digit number w/ leading zeroes, e.g.: '041'"
	exit 1
fi

trace_nr=$1
iface_monitor="wlan-monitor"
iface_txrx="wlan-txrx"

status_server_ip="10.10.10.113"
status_server_port="8081"

# create dirs
output_dir=$HOME/workbench/range-tests/vehicular-traces/trace-$trace_nr
if [ ! -d "$output_dir" ]
then
	mkdir -p "$output_dir"
fi

# update output-dir.txt w/ the current output_dir
echo "$output_dir" > $HOME/workbench/range-tests/vehicular-traces/output-dir.txt

# get comm. iface channel & width
channel=$(iw dev wlan-txrx info | awk '/channel/ {print $2}')
bw=$(iw dev wlan-txrx info | awk '/channel/ {print $6}')

# set the correct signal next to HT40 or HT80 ('+' or '-')
#	- HT40- : if center1 < freq
#	- HT40+ : if center1 > freq
if [ "$bw" == "40" ]
then
    if [ "$channel" == "36" ]
    then
        bw=$bw+
    else
        bw=$bw-
    fi
fi

# set wlan short and long retry options
wiphy="phy"$(iw dev wlan-txrx info | awk '/wiphy/ {print $2}')
iw phy $wiphy set retry short 7 long 4

# set monitor interface to monitor mode
iface_monitor_mode="$(iw dev $iface_monitor info | awk '/type/ {print $2}')"
if [ "$iface_monitor_mode" != "monitor" ]
then
	ifconfig $iface_monitor down
	iw $iface_monitor set monitor control
	ifconfig $iface_monitor up
fi

# adjust channel and bandwidth on monitor interface
/usr/sbin/iw dev wlan-monitor set channel "$channel:HT$bw"

# start tcpdump on monitor iface
tcpdump -B 100000 -s96 -i wlan-monitor -y IEEE802_11_RADIO -w "$output_dir"/monitor.$(date +"%s").pcap &
# extract offsets to NTP server
$HOME/workbench/wifi-vehicles/data-collection/get-ntpdate.sh $trace_nr "$output_dir" &
# extract channel util. on tx-rx and monitor interfaces
$HOME/workbench/wifi-vehicles/data-collection/get-cbt.sh $trace_nr "$output_dir" $iface_txrx &
$HOME/workbench/wifi-vehicles/data-collection/get-cbt.sh $trace_nr "$output_dir" $iface_monitor &
# extract cpu stats
$HOME/workbench/wifi-vehicles/data-collection/get-cpu.sh $trace_nr "$output_dir" &
# extract gps
python $HOME/workbench/wifi-vehicles/data-collection/get-gps.py --output-dir "$output_dir" &
# stop & start report status daemon (for status webpage)
pkill -f report-status
python $HOME/workbench/wifi-vehicles/data-collection/report-status.py --ip $status_server_ip --port $status_server_port --output-dir $HOME/workbench/range-tests/vehicular-traces &> /dev/null &

# call restart-client script (starts producer > consumer flow, ap scripts, etc.)
/usr/local/bin/restart-client "$trace_nr" "root@10.10.13.1" 5201 &

exit 0

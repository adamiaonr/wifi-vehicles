#!/bin/bash

if [ $# -lt 2 ]
then
	echo "usage : $0 <protocol> <trace-nr> (if protocol = 'udp': <udp-bitrate>)"
	echo "options : "
	echo "    <protocol> : 'tcp' or 'udp'"
	echo "    <trace-nr> : nr. of trace to use in logs. 3 digit number w/ leading zeroes, e.g.: '041'"
	echo "    <udp-bitrate> : target bitrate in Mbps, if 'udp' is chosen as <protocol>, e.g. '50' for 50 Mbps."
	exit 1
fi

proto=$1
trace_nr=$2
# handle bitrate arg
bitrate=$3
if [ "$1" == "udp" ]
then

	if [ $# -lt 3 ]
	then
		echo "usage : $0 <protocol> <trace-nr> <udp-bitrate>"
		exit 1
	fi
fi

# create dirs (if not available already)
output_dir=$HOME/workbench/range-tests/vehicular-traces/trace-$trace_nr
if [ ! -d "$output_dir" ]
then
	mkdir -p "$output_dir"
fi
# update output-dir.txt w/ the current output_dir
echo "$output_dir" > $HOME/workbench/range-tests/vehicular-traces/output-dir.txt

# get comm. iface channel & width
channel=$(iw dev wlan-txrx info | awk '/channel/ {print $2}')
bw=$(iw dev wlan-txrx info | awk '/channel/ {print $6}')
# get the right signal next to HT40 or HT80 ('+' or '-')
#	- HT40- : if center1 < freq
#	- HT40+ : if center1 > freq
if [ "$bw" == "40" ]
then
    if [ "$channel" == "36" ]
    then
        bw=$bw+
    else
        bw=$bw-
    fi
fi

# set wlan short and long retry options...
wiphy="phy"$(iw dev wlan-txrx info | awk '/wiphy/ {print $2}')
iw phy $wiphy set retry short 7 long 4

# add route to server
# ip route add 10.10.12.0/24 via 10.10.13.1 dev wlan-txrx
# change channel on the monitoring iface to that of the comm. iface
python $HOME/workbench/wifi-vehicles/data-collection/cbt.py --iface wlan-monitor --set-monitor-mode "$channel:HT$bw"
#	- call tcpdump directly in script
#	- a restart-client script, which re-starts an iperf3 client / server pair every time iperf3 is detected to 'hang'
# FIXME : shouldn't we use filters here? also, note that we've removed the '-s0' option
tcpdump -i wlan-monitor -y IEEE802_11_RADIO -w "$output_dir"/monitor.$(date +"%s").pcap &
/usr/local/bin/restart-client "$trace_nr" "root@10.10.13.1" 10.10.13.1 5201 $proto $bitrate &

# extract accuracy of time synch via ntp w/ local server
python $HOME/workbench/wifi-vehicles/data-collection/get-ntp-accuracy.py --output-dir "$output_dir" &
# extract bitrate adaptation algorithm stats
python $HOME/workbench/wifi-vehicles/data-collection/bitrate-adapt-stats.py --input-dir "/sys/kernel/debug/ieee80211" --output-dir "$output_dir" &
# extract cbt and cpu stats
$HOME/workbench/wifi-vehicles/data-collection/get-cbt.sh $trace_nr "$output_dir" "wlan-txrx" &
$HOME/workbench/wifi-vehicles/data-collection/get-cbt.sh $trace_nr "$output_dir" "wlan-monitor" &
$HOME/workbench/wifi-vehicles/data-collection/get-cpu.sh $trace_nr "$output_dir" &
# extract gps script
python $HOME/workbench/wifi-vehicles/data-collection/get-gps.py --output-dir "$output_dir" &
# run report status
pkill -f report-status
#python $HOME/workbench/wifi-vehicles/data-collection/report-status.py --ip 10.10.10.113 --port 8080 --output-dir $HOME/workbench/range-tests/vehicular-traces/output-dir.txt
python $HOME/workbench/wifi-vehicles/data-collectioreport-status.py --ip 10.10.10.113 --port 8081 --output-dir $HOME/workbench/range-tests/vehicular-traces &> /dev/null &

exit 0

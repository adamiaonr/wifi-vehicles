#!/bin/bash

if [ $# -lt 2 ]
then
	echo "usage : $0 <output-dir> <trace-nr>"
	exit 1
fi

output_dir=$1
trace_nr=$2

# get comm. iface channel & width
# FIXME : the tp-link archer t4uh doesn't provide channel & bw info so we have to hardcode it
# channel=$(iw dev wlan-txrx info | awk '/channel/ {print $2}')
# bw=$(iw dev wlan-txrx info | awk '/channel/ {print $6}')
channel="36"
bw="40"
# get the right signal next to HT40 or HT80 ('+' or '-')
#	- HT40- : if center1 < freq
#	- HT40+ : if center1 > freq
if [ "$bw" == "40" ]
then
    if [ "$channel" == "36" ]
    then
        bw=$bw+
    else
        bw=$bw-
    fi
fi

# set wlan short and long retry
wiphy="phy"$(iw dev wlan-txrx info | awk '/wiphy/ {print $2}')
iw phy $wiphy set retry short 7 long 4

# FIXME : for simplicity we use hardcoded values. this should be changed in the future.
# add route to server
# ip route add 10.10.12.0/24 via 10.10.14.1 dev wlan-txrx
# change channel on the monitoring iface to that of the comm. iface
python $HOME/workbench/wifi-vehicles/data-collection/cbt.py --iface wlan-monitor --set-monitor-mode "$channel:HT$bw"
# tcpdump on monitor iface (and raspberry pi for ac capabilities)
# FIXME : 
#	- no filters for smaller .pcap files? 
#	- removed the '-s0' option
# FIXME 2 : monitoring task done by tp-02 now
# tcpdump -i wlan-monitor -y IEEE802_11_RADIO -w "$output_dir"/monitor.$(date +"%s").pcap &
# ssh -i ~/.ssh/id_rpi_rsa "pi@10.10.11.102" "sudo kill-monitor; (sudo run-monitor $trace_nr > /dev/null 2>&1)&"
# re-starts an iperf3 client / server pair every time iperf3 is detected to 'hang'
/usr/local/bin/restart-client "$trace_nr" "root@10.10.14.1" 5202 &

exit 0
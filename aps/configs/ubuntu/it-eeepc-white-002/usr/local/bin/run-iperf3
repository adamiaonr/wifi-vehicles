#!/bin/bash

if [ $# -lt 2 ]
then
	echo "usage : $0 <protocol> <trace-nr> (if protocol = 'udp': <udp-bitrate>)"
	echo "options : "
	echo "    <protocol> : 'tcp' or 'udp'"
	echo "    <trace-nr> : nr. of trace to use in logs. 3 digit number w/ leading zeroes, e.g.: '041'"
	echo "    <udp-bitrate> : target bitrate in Mbps, if 'udp' is chosen as <protocol>, e.g. '50' for 50 Mbps."
	exit 1
fi

# kill outstanding scritps
pkill -f iperf3-to-mobile
pkill -f get-ntp-accuracy

# create dirs (if not available already)
# output_dir=$HOME/workbench/range-tests/vehicular-traces/trace-$2/$(iw wlx24050f9e2cb1 info | awk '/channel/ {print $2}')
# output_dir=$HOME/workbench/range-tests/vehicular-traces/trace-$2/$(iw wlx24050fe57b6a info | awk '/channel/ {print $2}')
output_dir=$HOME/workbench/range-tests/vehicular-traces/trace-$2
mkdir -p "$output_dir"

# handle bitrate arg
bitrate="X"
if [ "$1" == "udp" ]
then

	if [ $# -lt 3 ]
	then
		echo "usage : $0 <protocol> <trace-nr> <udp-bitrate>"
		exit 1
	fi

	bitrate=$3
fi

# set wlan short and long retry options to 10 and 7, respectively...
wiphy="phy"$(iw dev wlan-txrx info | awk '/wiphy/ {print $2}')
iw phy $wiphy set retry short 10 long 7

# get comm. iface channel & width
channel=$(iw wlan-txrx info | awk '/channel/ {print $2}')
bw=$(iw wlan-txrx info | awk '/channel/ {print $6}')

# get the right signal next to HT40 or HT80 ('+' or '-')
#	- HT40- : 2 x 20 MHz channels, primary channel is higher number, secondary channel is lower number 
#             e.g. [36, 40] w/ 40 MHz channel width, iw dev <iface> will report channel as 40
#	- HT40+ : 2 x 20 MHz channels, primary channel is lower number, secondary channel is higher number
#             e.g. [36, 40] w/ 40 MHz channel width, iw dev <iface> will report channel as 36
if [ $bw == '40' ]
then
    if [ $(($channel % 8)) ]
    then
        bw=$bw-
    else
        bw=$bw+
    fi
fi

# change channel on the monitoring iface to that of the comm. iface
echo "$channel:HT$bw"
python $HOME/workbench/wifi-vehicles/wifi-assist/src/data-collection/cbt.py --iface wlan-monitor --set-monitor-mode "$channel:HT$bw"

# run scripts
# iperf3-to-mobile.py not used anymore, instead we use:
#	- call tcpdump directly in script
#	- a restart-iperf3-client, which starts a iperf3 client in -R mode, and re-spawns server on remote side
# python $HOME/workbench/wifi-vehicles/wifi-assist/src/data-collection/iperf3-to-mobile.py --restart-ntp --protocol $1 --bitrate $bitrate --ip-server 10.10.12.1 --port 5203 --reverse --monitor-iface wlan-monitor --output-dir "$output_dir" &
tcpdump -i wlan-monitor -y IEEE802_11_RADIO -s0 -w "$output_dir"/monitor.$(date +"%s").pcap &
/usr/local/bin/restart-client "$2" "adamiaonr@10.10.13.1" 10.10.12.1 5203 $2 $bitrate &

# extract accuracy of time synch via ntp w/ local server
python $HOME/workbench/wifi-vehicles/wifi-assist/src/data-collection/get-ntp-accuracy.py --output-dir "$output_dir" &
# extract bitrate adaptation algorithm stats
python $HOME/workbench/wifi-vehicles/wifi-assist/src/data-collection/bitrate-adapt-stats.py --input-dir "/sys/kernel/debug/ieee80211" --output-dir "$output_dir" &
# extract cpu stats
$HOME/workbench/wifi-vehicles/wifi-assist/src/data-collection/get-cpu.sh $2 "$output_dir" &
# report status to webserver
python $HOME/workbench/wifi-vehicles/wifi-assist/src/data-collection/report-status.py --ip 10.10.13.1 --port 8081 --output-dir "$output_dir" --mode "client" &

exit 0
